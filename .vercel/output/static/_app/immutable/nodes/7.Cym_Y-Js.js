import"../chunks/Bzak7iHL.js";import"../chunks/CMQcD2UY.js";import{ak as g,al as G,as as a,aw as P,an as d,ap as z,ar as t,aq as I,at as l,g as u,A as M,s as h,am as F}from"../chunks/XzvCHHrQ.js";import{e as n}from"../chunks/DEvj3O7V.js";import{i as A}from"../chunks/DNlooKOq.js";import{s as j}from"../chunks/BoJ5Hi5g.js";import{s as E}from"../chunks/Dfc5OmDN.js";import{T as b}from"../chunks/WHmIjTs4.js";var H=g(`<meta property="og:title" content="C++ Games | Stefanos Portfolio" class="svelte-1g3dqvq"/> <meta property="og:description" content="Explore Stefanos' collection of C++ games, including a text-based maze and a two-player Tic-Tac-Toe. Each project demonstrates dynamic data structures, user input, and classic game logic in C++." class="svelte-1g3dqvq"/> <meta property="og:type" content="website" class="svelte-1g3dqvq"/> <meta property="og:url" content="https://stefanosgif.vercel.app/projects/cpp-games" class="svelte-1g3dqvq"/> <meta property="og:image" content="https://stefanosgif.vercel.app/tic.png" class="svelte-1g3dqvq"/> <meta name="description" content="Explore Stefanos' collection of C++ games, including a text-based maze and a two-player Tic-Tac-Toe. Each project demonstrates dynamic data structures, user input, and classic game logic in C++." class="svelte-1g3dqvq"/>`,1),L=g('<div class="fullscreen-overlay svelte-1g3dqvq"><img alt="Fullscreen" class="fullscreen-img svelte-1g3dqvq"/> <button class="close-btn svelte-1g3dqvq" aria-label="Close fullscreen">&times;</button></div>'),R=g(`<section class="wrap title svelte-1g3dqvq"><h1 class="svelte-1g3dqvq">Welcome to my C++ Games</h1> <p class="lead svelte-1g3dqvq">This contains my C++ Games, which I’ll continue to expand as I improve. I love making simple little games, so feel free to explore the code on the links that I will share for each one.</p></section> <section class="wrap game svelte-1g3dqvq"><div class="badge svelte-1g3dqvq"><span class="num svelte-1g3dqvq">1</span> <div class="fire svelte-1g3dqvq"><span class="flame f1 svelte-1g3dqvq"></span><span class="flame f2 svelte-1g3dqvq"></span><span class="flame f3 svelte-1g3dqvq"></span><span class="flame f4 svelte-1g3dqvq"></span><span class="flame f5 svelte-1g3dqvq"></span></div></div> <div class="osc svelte-1g3dqvq"><div class="osc-body svelte-1g3dqvq"></div><div class="osc-head svelte-1g3dqvq"></div></div> <h2 class="game-title svelte-1g3dqvq">Tic Tac Toe</h2> <p class="desc svelte-1g3dqvq">An interactive, text-based maze navigation program demonstrating structured data, user input handling, and simple collision detection: <br class="svelte-1g3dqvq"/><br class="svelte-1g3dqvq"/> <strong class="svelte-1g3dqvq">Maze Representation</strong><br class="svelte-1g3dqvq"/> The maze is a 10×10 grid stored as a vector&lt;vector&lt;char&gt;&gt;, where '#' denotes walls and ' ' open paths. <br class="svelte-1g3dqvq"/><br class="svelte-1g3dqvq"/> <strong class="svelte-1g3dqvq">Player Struct</strong><br class="svelte-1g3dqvq"/> A Player struct holds x and y coordinates, initialized at (1,1). <br class="svelte-1g3dqvq"/><br class="svelte-1g3dqvq"/> <strong class="svelte-1g3dqvq">Rendering Function</strong><br class="svelte-1g3dqvq"/> displayMaze() iterates over the grid, drawing either the maze cell or a 'P' at the player’s current position. <br class="svelte-1g3dqvq"/><br class="svelte-1g3dqvq"/> <strong class="svelte-1g3dqvq">Movement Logic</strong><br class="svelte-1g3dqvq"/> movePlayer(direction) computes tentative coordinates based on w/a/s/d input, checks for open space, and updates the player’s position if the target cell isn’t a wall. <br class="svelte-1g3dqvq"/><br class="svelte-1g3dqvq"/> <strong class="svelte-1g3dqvq">Main Loop</strong><br class="svelte-1g3dqvq"/> Continuously renders the maze, prompts for direction, applies movement, and clears the console for real-time navigation. <br class="svelte-1g3dqvq"/><br class="svelte-1g3dqvq"/> This project highlights dynamic data structures, control flow, and basic game-loop architecture in C++. Find <a href="https://github.com/Stefanos-gif/tic-tac-toe-game/tree/main" target="_blank" rel="noopener noreferrer" class="svelte-1g3dqvq">Here</a>!</p> <figure class="img-card svelte-1g3dqvq"><!></figure></section> <section class="wrap game svelte-1g3dqvq"><div class="badge svelte-1g3dqvq"><span class="num svelte-1g3dqvq">2</span> <div class="fire svelte-1g3dqvq"><span class="flame f1 svelte-1g3dqvq"></span><span class="flame f2 svelte-1g3dqvq"></span><span class="flame f3 svelte-1g3dqvq"></span><span class="flame f4 svelte-1g3dqvq"></span><span class="flame f5 svelte-1g3dqvq"></span></div></div> <div class="osc osc-2 svelte-1g3dqvq"><div class="osc-body svelte-1g3dqvq"></div><div class="osc-head svelte-1g3dqvq"></div></div> <h2 class="game-title svelte-1g3dqvq">Simple Console Game</h2> <p class="desc svelte-1g3dqvq">A compact, two-player Tic-Tac-Toe game implemented with clear, modular functions and robust input handling: <br class="svelte-1g3dqvq"/><br class="svelte-1g3dqvq"/> <strong class="svelte-1g3dqvq">Board Representation</strong><br class="svelte-1g3dqvq"/> A 3×3 char array labeled ‘1’–‘9’ lets players pick moves by slot number. Each turn redraws the grid via drawBoard(). <br class="svelte-1g3dqvq"/><br class="svelte-1g3dqvq"/> <strong class="svelte-1g3dqvq">Core Logic</strong><br class="svelte-1g3dqvq"/> placeMarker(slot): Converts a slot to row/column indices, checks occupancy, and places the current marker. <br class="svelte-1g3dqvq"/> winner(): Scans rows, columns, and diagonals for three identical markers, returning the winning player or 0. <br class="svelte-1g3dqvq"/> swapPlayerAndMarker(): Toggles between Player 1 and Player 2 along with their markers (X/O). <br class="svelte-1g3dqvq"/><br class="svelte-1g3dqvq"/> <strong class="svelte-1g3dqvq">Game Flow</strong><br class="svelte-1g3dqvq"/> In game(), Player 1 first selects X or O. The loop runs up to nine moves, prompting for valid slots, rejecting invalid or occupied entries, and ending early on a win. Finally, it declares the winner or a tie. <br class="svelte-1g3dqvq"/><br class="svelte-1g3dqvq"/> This project showcases procedural design, input validation, and user interaction in C++. Find <a href="https://github.com/Stefanos-gif/simple-console-game" target="_blank" rel="noopener noreferrer" class="svelte-1g3dqvq">Here</a>!</p> <figure class="img-card svelte-1g3dqvq"><!></figure></section> <!>`,1);function N(y){const w="clamp(220px, 51vh, 560px)",_="clamp(220px, 51vh, 560px)";let r=M(null);function q(e){h(r,e),document.body.style.overflow="hidden"}function p(){h(r,null),document.body.style.overflow=""}var m=R();G(e=>{var s=H();z.title="C++ Games | Stefanos Portfolio",I(10),d(e,s)});var o=a(P(m),2),c=a(t(o),8),T=t(c);b(T,{img_url1:"/tic.png",img_url2:"/tic.png",img_url3:"/tic.png",img_height:w,aspect_ratio:"994/859",alt:"Tic Tac Toe"}),l(c),l(o);var i=a(o,2),v=a(t(i),8),k=t(v);b(k,{img_url1:"/scgame.png",img_url2:"/scgame.png",img_url3:"/scgame.png",img_height:_,aspect_ratio:"988/910",alt:"Simple Console Game"}),l(v),l(i);var C=a(i,2);{var x=e=>{var s=L(),f=t(s),S=a(f,2);l(s),F(()=>j(f,"src",u(r))),n("click",S,p),n("click",s,E(p)),d(e,s)};A(C,e=>{u(r)&&e(x)})}n("click",c,()=>q("/tic.png")),n("click",v,()=>q("/scgame.png")),d(y,m)}export{N as component};
