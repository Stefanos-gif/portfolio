import{s as Ce,f as a,a as f,e as de,z as Me,g as l,d as r,c as w,u as M,h as N,j as e,v as s,i as x,x as B,A as Te,P as me,S as ke}from"../chunks/scheduler.7c1f51a2.js";import{S as xe,i as Ee,b as ue,d as be,m as ge,a as fe,t as we,e as he}from"../chunks/index.28fe98d6.js";import{g as He}from"../chunks/globals.7f7f1b26.js";import{T as _e}from"../chunks/TripleImage.40e2fb67.js";const{document:E}=He;function ye(_){let n,c,p,d,o,h="×",k,b;return{c(){n=a("div"),c=a("img"),d=f(),o=a("button"),o.textContent=h,this.h()},l(y){n=l(y,"DIV",{class:!0});var g=N(n);c=l(g,"IMG",{src:!0,alt:!0,class:!0}),d=w(g),o=l(g,"BUTTON",{class:!0,"aria-label":!0,"data-svelte-h":!0}),M(o)!=="svelte-1k0k5oo"&&(o.textContent=h),g.forEach(r),this.h()},h(){me(c.src,p=_[0])||e(c,"src",p),e(c,"alt","Fullscreen"),e(c,"class","fullscreen-img svelte-bt94w3"),e(o,"class","close-btn svelte-bt94w3"),e(o,"aria-label","Close fullscreen"),e(n,"class","fullscreen-overlay svelte-bt94w3")},m(y,g){x(y,n,g),s(n,c),s(n,d),s(n,o),k||(b=[B(o,"click",_[2]),B(n,"click",ke(_[2]))],k=!0)},p(y,g){g&1&&!me(c.src,p=y[0])&&e(c,"src",p)},d(y){y&&r(n),k=!1,Te(b)}}}function Ie(_){let n,c,p,d,o,h,k,b,y='<h1 class="svelte-bt94w3">Welcome to my C++ Games</h1> <p class="lead svelte-bt94w3">This contains my C++ Games, which I’ll continue to expand as I improve. I love making simple little games, so feel free to explore the code on the links that I will share for each one.</p>',g,m,H,te='<span class="num svelte-bt94w3">1</span> <div class="fire svelte-bt94w3"><span class="flame f1 svelte-bt94w3"></span><span class="flame f2 svelte-bt94w3"></span><span class="flame f3 svelte-bt94w3"></span><span class="flame f4 svelte-bt94w3"></span><span class="flame f5 svelte-bt94w3"></span></div>',U,I,se='<div class="osc-body svelte-bt94w3"></div><div class="osc-head svelte-bt94w3"></div>',X,S,ae="Tic Tac Toe",W,$,le=`An interactive, text-based maze navigation program demonstrating structured data, user input handling, and simple collision detection:
    <br class="svelte-bt94w3"/><br class="svelte-bt94w3"/> <strong class="svelte-bt94w3">Maze Representation</strong><br class="svelte-bt94w3"/>
    The maze is a 10×10 grid stored as a vector&lt;vector&lt;char&gt;&gt;, where &#39;#&#39; denotes walls and &#39; &#39; open paths.
    <br class="svelte-bt94w3"/><br class="svelte-bt94w3"/> <strong class="svelte-bt94w3">Player Struct</strong><br class="svelte-bt94w3"/>
    A Player struct holds x and y coordinates, initialized at (1,1).
    <br class="svelte-bt94w3"/><br class="svelte-bt94w3"/> <strong class="svelte-bt94w3">Rendering Function</strong><br class="svelte-bt94w3"/>
    displayMaze() iterates over the grid, drawing either the maze cell or a &#39;P&#39; at the player’s current position.
    <br class="svelte-bt94w3"/><br class="svelte-bt94w3"/> <strong class="svelte-bt94w3">Movement Logic</strong><br class="svelte-bt94w3"/>
    movePlayer(direction) computes tentative coordinates based on w/a/s/d input, checks for open space, and updates the player’s position if the target cell isn’t a wall.
    <br class="svelte-bt94w3"/><br class="svelte-bt94w3"/> <strong class="svelte-bt94w3">Main Loop</strong><br class="svelte-bt94w3"/>
    Continuously renders the maze, prompts for direction, applies movement, and clears the console for real-time navigation.
    <br class="svelte-bt94w3"/><br class="svelte-bt94w3"/>
    This project highlights dynamic data structures, control flow, and basic game-loop architecture in C++. Find
    <a href="https://github.com/Stefanos-gif/tic-tac-toe-game/tree/main" target="_blank" rel="noopener noreferrer" class="svelte-bt94w3">Here</a>!`,J,L,P,R,u,A,ne='<span class="num svelte-bt94w3">2</span> <div class="fire svelte-bt94w3"><span class="flame f1 svelte-bt94w3"></span><span class="flame f2 svelte-bt94w3"></span><span class="flame f3 svelte-bt94w3"></span><span class="flame f4 svelte-bt94w3"></span><span class="flame f5 svelte-bt94w3"></span></div>',K,G,re='<div class="osc-body svelte-bt94w3"></div><div class="osc-head svelte-bt94w3"></div>',Q,z,ce="Simple Console Game",Y,F,oe=`A compact, two-player Tic-Tac-Toe game implemented with clear, modular functions and robust input handling:
    <br class="svelte-bt94w3"/><br class="svelte-bt94w3"/> <strong class="svelte-bt94w3">Board Representation</strong><br class="svelte-bt94w3"/>
    A 3×3 char array labeled ‘1’–‘9’ lets players pick moves by slot number. Each turn redraws the grid via drawBoard().
    <br class="svelte-bt94w3"/><br class="svelte-bt94w3"/> <strong class="svelte-bt94w3">Core Logic</strong><br class="svelte-bt94w3"/>
    placeMarker(slot): Converts a slot to row/column indices, checks occupancy, and places the current marker.
    <br class="svelte-bt94w3"/>
    winner(): Scans rows, columns, and diagonals for three identical markers, returning the winning player or 0.
    <br class="svelte-bt94w3"/>
    swapPlayerAndMarker(): Toggles between Player 1 and Player 2 along with their markers (X/O).
    <br class="svelte-bt94w3"/><br class="svelte-bt94w3"/> <strong class="svelte-bt94w3">Game Flow</strong><br class="svelte-bt94w3"/>
    In game(), Player 1 first selects X or O. The loop runs up to nine moves, prompting for valid slots, rejecting invalid or occupied entries, and ending early on a win. Finally, it declares the winner or a tie.
    <br class="svelte-bt94w3"/><br class="svelte-bt94w3"/>
    This project showcases procedural design, input validation, and user interaction in C++. Find
    <a href="https://github.com/Stefanos-gif/simple-console-game" target="_blank" rel="noopener noreferrer" class="svelte-bt94w3">Here</a>!`,Z,j,O,V,D,q,ee,ie;P=new _e({props:{img_url1:"/tic.png",img_url2:"/tic.png",img_url3:"/tic.png",img_height:Se,aspect_ratio:"994/859",alt:"Tic Tac Toe"}}),O=new _e({props:{img_url1:"/scgame.png",img_url2:"/scgame.png",img_url3:"/scgame.png",img_height:$e,aspect_ratio:"988/910",alt:"Simple Console Game"}});let v=_[0]&&ye(_);return{c(){n=a("meta"),c=a("meta"),p=a("meta"),d=a("meta"),o=a("meta"),h=a("meta"),k=f(),b=a("section"),b.innerHTML=y,g=f(),m=a("section"),H=a("div"),H.innerHTML=te,U=f(),I=a("div"),I.innerHTML=se,X=f(),S=a("h2"),S.textContent=ae,W=f(),$=a("p"),$.innerHTML=le,J=f(),L=a("figure"),ue(P.$$.fragment),R=f(),u=a("section"),A=a("div"),A.innerHTML=ne,K=f(),G=a("div"),G.innerHTML=re,Q=f(),z=a("h2"),z.textContent=ce,Y=f(),F=a("p"),F.innerHTML=oe,Z=f(),j=a("figure"),ue(O.$$.fragment),V=f(),v&&v.c(),D=de(),this.h()},l(t){const i=Me("svelte-1kt1r09",E.head);n=l(i,"META",{property:!0,content:!0,class:!0}),c=l(i,"META",{property:!0,content:!0,class:!0}),p=l(i,"META",{property:!0,content:!0,class:!0}),d=l(i,"META",{property:!0,content:!0,class:!0}),o=l(i,"META",{property:!0,content:!0,class:!0}),h=l(i,"META",{name:!0,content:!0,class:!0}),i.forEach(r),k=w(t),b=l(t,"SECTION",{class:!0,"data-svelte-h":!0}),M(b)!=="svelte-ade5v"&&(b.innerHTML=y),g=w(t),m=l(t,"SECTION",{class:!0});var T=N(m);H=l(T,"DIV",{class:!0,"data-svelte-h":!0}),M(H)!=="svelte-1p9203j"&&(H.innerHTML=te),U=w(T),I=l(T,"DIV",{class:!0,"data-svelte-h":!0}),M(I)!=="svelte-86o0yq"&&(I.innerHTML=se),X=w(T),S=l(T,"H2",{class:!0,"data-svelte-h":!0}),M(S)!=="svelte-x2jyn2"&&(S.textContent=ae),W=w(T),$=l(T,"P",{class:!0,"data-svelte-h":!0}),M($)!=="svelte-8v7c8o"&&($.innerHTML=le),J=w(T),L=l(T,"FIGURE",{class:!0});var pe=N(L);be(P.$$.fragment,pe),pe.forEach(r),T.forEach(r),R=w(t),u=l(t,"SECTION",{class:!0});var C=N(u);A=l(C,"DIV",{class:!0,"data-svelte-h":!0}),M(A)!=="svelte-z8p068"&&(A.innerHTML=ne),K=w(C),G=l(C,"DIV",{class:!0,"data-svelte-h":!0}),M(G)!=="svelte-1sydamm"&&(G.innerHTML=re),Q=w(C),z=l(C,"H2",{class:!0,"data-svelte-h":!0}),M(z)!=="svelte-18c2y1p"&&(z.textContent=ce),Y=w(C),F=l(C,"P",{class:!0,"data-svelte-h":!0}),M(F)!=="svelte-798e1z"&&(F.innerHTML=oe),Z=w(C),j=l(C,"FIGURE",{class:!0});var ve=N(j);be(O.$$.fragment,ve),ve.forEach(r),C.forEach(r),V=w(t),v&&v.l(t),D=de(),this.h()},h(){E.title="C++ Games | Stefanos Portfolio",e(n,"property","og:title"),e(n,"content","C++ Games | Stefanos Portfolio"),e(n,"class","svelte-bt94w3"),e(c,"property","og:description"),e(c,"content","Explore Stefanos' collection of C++ games, including a text-based maze and a two-player Tic-Tac-Toe. Each project demonstrates dynamic data structures, user input, and classic game logic in C++."),e(c,"class","svelte-bt94w3"),e(p,"property","og:type"),e(p,"content","website"),e(p,"class","svelte-bt94w3"),e(d,"property","og:url"),e(d,"content","https://stefanosgif.vercel.app/projects/cpp-games"),e(d,"class","svelte-bt94w3"),e(o,"property","og:image"),e(o,"content","https://stefanosgif.vercel.app/tic.png"),e(o,"class","svelte-bt94w3"),e(h,"name","description"),e(h,"content","Explore Stefanos' collection of C++ games, including a text-based maze and a two-player Tic-Tac-Toe. Each project demonstrates dynamic data structures, user input, and classic game logic in C++."),e(h,"class","svelte-bt94w3"),e(b,"class","wrap title svelte-bt94w3"),e(H,"class","badge svelte-bt94w3"),e(I,"class","osc svelte-bt94w3"),e(S,"class","game-title svelte-bt94w3"),e($,"class","desc svelte-bt94w3"),e(L,"class","img-card svelte-bt94w3"),e(m,"class","wrap game svelte-bt94w3"),e(A,"class","badge svelte-bt94w3"),e(G,"class","osc osc-2 svelte-bt94w3"),e(z,"class","game-title svelte-bt94w3"),e(F,"class","desc svelte-bt94w3"),e(j,"class","img-card svelte-bt94w3"),e(u,"class","wrap game svelte-bt94w3")},m(t,i){s(E.head,n),s(E.head,c),s(E.head,p),s(E.head,d),s(E.head,o),s(E.head,h),x(t,k,i),x(t,b,i),x(t,g,i),x(t,m,i),s(m,H),s(m,U),s(m,I),s(m,X),s(m,S),s(m,W),s(m,$),s(m,J),s(m,L),ge(P,L,null),x(t,R,i),x(t,u,i),s(u,A),s(u,K),s(u,G),s(u,Q),s(u,z),s(u,Y),s(u,F),s(u,Z),s(u,j),ge(O,j,null),x(t,V,i),v&&v.m(t,i),x(t,D,i),q=!0,ee||(ie=[B(L,"click",_[3]),B(j,"click",_[4])],ee=!0)},p(t,[i]){t[0]?v?v.p(t,i):(v=ye(t),v.c(),v.m(D.parentNode,D)):v&&(v.d(1),v=null)},i(t){q||(fe(P.$$.fragment,t),fe(O.$$.fragment,t),q=!0)},o(t){we(P.$$.fragment,t),we(O.$$.fragment,t),q=!1},d(t){t&&(r(k),r(b),r(g),r(m),r(R),r(u),r(V),r(D)),r(n),r(c),r(p),r(d),r(o),r(h),he(P),he(O),v&&v.d(t),ee=!1,Te(ie)}}}const Se="clamp(220px, 51vh, 560px)",$e="clamp(220px, 51vh, 560px)";function Le(_,n,c){let p=null;function d(b){c(0,p=b),document.body.style.overflow="hidden"}function o(){c(0,p=null),document.body.style.overflow=""}return[p,d,o,()=>d("/tic.png"),()=>d("/scgame.png")]}class Fe extends xe{constructor(n){super(),Ee(this,n,Le,Ie,Ce,{})}}export{Fe as component};
